# This is a basic workflow to help you get started with Actions

name: Build and Publish NeoAgi.AWS.CodeArtifact.Pruner Image

# Controls when the workflow will run
on:
  # Triggers the workflow on push of a new tag
  push:
    tags: [ 'v*' ] 
    branch: main
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  build_image:
    runs-on: ubuntu-latest

    env:
      KEY_ID: ${{ secrets.NEOAGI_CODE_ARTIFACT_CI_KEY_ID }}
      ACCESS_KEY: ${{ secrets.NEOAGI_CODE_ARTIFACT_CI_ACCESS_KEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Notify
        uses: neoagi/actions-slack-notify@v1
        with:
            action-message: "${{ github.ref_name }} with SHA of ${{ github.sha }} Starting Build"

      - name: Init Workflow Variables
        run: |
            echo "TAG_NAME=$(echo ${{ github.ref_name }} | sed s/v// )" >> $GITHUB_ENV
            echo "SHORT_HASH=$(echo ${{ github.sha }} | cut -c 1-8 )" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.NEOAGI_PUBLIC_DOCKER_ID }}
          aws-secret-access-key: ${{ secrets.NEOAGI_PUBLIC_DOCKER_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.PUBLIC_DOCKER_REPOSITORY }}

      - name: Build the Image
        run: | 
          docker build -t neoagi.aws.codeartifact.pruner:latest -t neoagi.aws.codearifact.pruner:x7q2k3a7 . -f Dockerfile
        shell: bash
      
      - name: Tag the Image
        run: |
          docker tag neoagi.aws.codeartifact.pruner:latest ${{ secrets.PUBLIC_DOCKER_REPOSITORY }}/neoagi.aws.codeartifact.pruner:${{ env.TAG_NAME }}
          docker tag neoagi.aws.codeartifact.pruner:latest ${{ secrets.PUBLIC_DOCKER_REPOSITORY }}/neoagi.aws.codeartifact.pruner:${{ env.SHORT_HASH }}
          docker tag neoagi.aws.codeartifact.pruner:latest ${{ secrets.PUBLIC_DOCKER_REPOSITORY }}/neoagi.aws.codeartifact.pruner:latest
        shell: bash

      - name: Push the Image
        run: |
          docker push ${{ secrets.PUBLIC_DOCKER_REPOSITORY }}/neoagi.aws.codeartifact.pruner:${{ env.TAG_NAME }}
          docker push ${{ secrets.PUBLIC_DOCKER_REPOSITORY }}/neoagi.aws.codeartifact.pruner:${{ env.SHORT_HASH }}
          docker push ${{ secrets.PUBLIC_DOCKER_REPOSITORY }}/neoagi.aws.codeartifact.pruner:latest
        shell: bash

      - name: Notify
        uses: neoagi/actions-slack-notify@v1
        if: always()